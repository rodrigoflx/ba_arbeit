from abc import ABC, abstractmethod
from typing import List, Any

class PostProcessingInterface(ABC):
    """
    Abstract base class for post-processing results from the sampling a zipfian distribution.    
    """

    @abstractmethod
    def process(self, data: dict, total : int) -> dict:
        """
        Process the data generated by a sampler and return the results
        """
        pass


class RawOutputPostProcessor(PostProcessingInterface):
    """
    Post-processing implementation that returns the raw output of the sampler
    """

    def process(self, data: dict, total : int) -> dict:
        return data
    

class BucketingPostProcessor(PostProcessingInterface):
    """
    Post-processing implementation that returns the bucketed output of the sampler
    """
    def __init__(self, num_buckets):
        self.num_buckets = num_buckets

    def process(self, data : dict, total : int) -> dict:
        bucket_size = total // self.num_buckets
        bucketed_data = {}

        for i in range(self.num_buckets):
            bucketed_data[i] = sum([v for k,v in data.items() if i * bucket_size <= k < (i + 1) * bucket_size])
        return bucketed_data